/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import data.Funcionario;
import data.FuncionarioDao;
import javax.swing.JOptionPane;


/**
 *
 * @author Nelson
 */
public class TelaFuncionario extends javax.swing.JFrame {

    /**
     * Creates new form TelaFuncionario
     */
    public TelaFuncionario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMatricula = new javax.swing.JLabel();
        txtMatricula = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblCargo = new javax.swing.JLabel();
        txtCargo = new javax.swing.JTextField();
        lblSalario = new javax.swing.JLabel();
        txtSalario = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro de Funcionário - Test 1");
        getContentPane().setLayout(null);

        lblMatricula.setText("Matrícula:");
        getContentPane().add(lblMatricula);
        lblMatricula.setBounds(10, 10, 60, 30);
        getContentPane().add(txtMatricula);
        txtMatricula.setBounds(70, 10, 100, 30);

        lblNome.setText("Nome:");
        getContentPane().add(lblNome);
        lblNome.setBounds(10, 60, 60, 30);
        getContentPane().add(txtNome);
        txtNome.setBounds(70, 60, 200, 30);

        lblCargo.setText("Cargo:");
        getContentPane().add(lblCargo);
        lblCargo.setBounds(10, 110, 60, 30);
        getContentPane().add(txtCargo);
        txtCargo.setBounds(70, 110, 200, 30);

        lblSalario.setText("Salario:");
        getContentPane().add(lblSalario);
        lblSalario.setBounds(10, 160, 60, 30);
        getContentPane().add(txtSalario);
        txtSalario.setBounds(70, 160, 100, 30);

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalvar);
        btnSalvar.setBounds(150, 210, 110, 40);

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        getContentPane().add(btnConsultar);
        btnConsultar.setBounds(190, 10, 90, 30);

        setSize(new java.awt.Dimension(416, 339));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        
         FuncionarioDao dao; // Instancia objeto na variavel dao
         boolean status; // recebe o valor de retorno da conexao com o banco
         int resp;// variavel que recebe resultado do metodo conectar e desconectar
         
         
         Funcionario func = new Funcionario(); // instancia obejto na variavel func
         func.setMatricula(txtMatricula.getText()); //pega campo do formulario e envia para a capsula de dados de cadastro de funcionario para que seja encaminhado ao banco de dados
         func.setNome(txtNome.getText()); //pega campo do formulario e envia para a capsula de dados de cadastro de funcionario para que seja encaminhado ao banco de dados
         func.setCargo(txtCargo.getText()); //pega campo do formulario e envia para a capsula de dados de cadastro de funcionario para que seja encaminhado ao banco de dados
         func.setSalario(Double.parseDouble(txtSalario.getText())); //pega campo do formulario e envia para a capsula de dados de cadastro de funcionario para que seja encaminhado ao banco de dados
         //Double.parseDouble converte o texto em numero real
        
         
         dao = new FuncionarioDao(); // chama construtor da classe FuncionarioDao, inicializa variavel
         status = dao.conectar(); //chama metodo conectar dentro da classe FuncionarioDao 
         
        if(status == false){ //esta condição tambem pode ser usar como if(!status){ o sinal de ! é representado por "nao"
            JOptionPane.showMessageDialog(null, "Erro na conexão com o banco de dados");
        }else{
            resp = dao.salvar(func); //chama metodo salvar na classe FuncionarioDao, aonde os dados estão encapsulados
            if(resp == 1){ //tratamento de erro caso o retorno da variavel seja false (nao salvou)
                 JOptionPane.showMessageDialog(null,"Funcionário Cadastrado com Sucesso");            
                 LimparCampos();// metodo que limpa os campos              
            }else if(resp == 1062 ){ // XAMPP 1062 é o erro de duplicação de chave primaria
                 JOptionPane.showMessageDialog(null,"Esta Matricula ja esta cadastrada!");
            }else{
                JOptionPane.showMessageDialog(null,"Erro ao salvar o Funcionario");
            }
            dao.desconectar(); //chamate metodo desconectar dentro de FuncionarioDao desconectar do banco de dados.
            
        }
        
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void LimparCampos(){
            
            txtMatricula.setText(""); //limpa campo, insere texto vazio
            txtNome.setText(""); //limpa campo, insere texto vazio
            txtCargo.setText(""); //limpa campo, insere texto vazio
            txtSalario.setText(""); //limpa campo, insere texto vazio
            txtMatricula.requestFocus(); //pede foco do formulario, inicia o cursor
}
    
    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
       
        String matricula;
        matricula = txtMatricula.getText(); // Variavel String Matricula recebe o valor que foi digitado no campo matricula
        
        FuncionarioDao dao = new FuncionarioDao();
        boolean status = dao.conectar(); // chamada do metodo conectar com o banco de dados
        if(status==true){ // se a conexão der certo variavel statusrecebe true
            Funcionario func = dao.consultar(matricula); // depois de conectado, chama o metodo de consulta dentro da classe FuncionarioDao e armazena na classe Funcionario(setters e getters) aonde esta encapsulado as informações
            if(func == null ){ // Caso retorne nulo, exebir menssagem
                JOptionPane.showMessageDialog(null,"Funcionario Não encontrado ou Inexistente!");
            }else{//Caso encontre o funcionario
                txtNome.setText(func.getNome());
                txtCargo.setText(func.getCargo());
                txtSalario.setText(String.valueOf(func.getSalario()));// valueOf transforma em String
            }
            dao.desconectar(); // desconecta do banco de dados
        }else{
            JOptionPane.showMessageDialog(null,"Erro na Conexão com o DataBase");
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaFuncionario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel lblCargo;
    private javax.swing.JLabel lblMatricula;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblSalario;
    private javax.swing.JTextField txtCargo;
    private javax.swing.JTextField txtMatricula;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
